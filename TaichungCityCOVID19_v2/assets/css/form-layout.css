@charset "UTF-8";

/* 表單排列(水平) 最多4個單位 */

@media all and (min-width: 576px) {
    .GSMis-form-horizontal {
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 0;
    }
}

.GSMis-form-horizontal>dt {
    margin-bottom: 4px;
    margin-top: 16px;
    color: #007a9a;
    font-weight: bold;
    min-width: 9em;
}

@media all and (min-width: 576px) {
    .GSMis-form-horizontal>dt {
        display: -webkit-box;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: end;
        -webkit-justify-content: end;
        -ms-flex-pack: end;
        justify-content: end;
        text-align: right;
        margin-left: 8px;
        margin-top: 7px;
    }
    .GSMis-form-horizontal>dt::after {
        content: "";
        display: block;
        height: 20px;
        margin-top: 2px;
        border-right: 1px solid rgba(74, 74, 74, 0.25);
        padding-left: 8px;
        margin-right: 8px;
    }
}

.GSMis-form-horizontal .full {
    grid-column: 1/-1;
}

.GSMis-form-horizontal .wide {
    grid-column: 2/-1;
}

@media all and (min-width: 768px) {
    .GSMis-form-horizontal.units-2 {
        grid-template-columns: repeat(2, auto 1fr);
    }
}

@media all and (min-width: 768px) {
    .GSMis-form-horizontal.units-2 .span-next {
        grid-column: span 3;
    }
}

@media all and (min-width: 768px) {
    .GSMis-form-horizontal.units-3 {
        grid-template-columns: repeat(2, auto 1fr);
    }
}

@media all and (min-width: 992px) {
    .GSMis-form-horizontal.units-3 {
        grid-template-columns: repeat(3, auto 1fr);
    }
}

@media all and (min-width: 768px) {
    .GSMis-form-horizontal.units-3 .span-next {
        grid-column: span 3;
    }
}

@media all and (min-width: 768px) {
    .GSMis-form-horizontal.units-4 {
        grid-template-columns: repeat(2, auto 1fr);
    }
}

@media all and (min-width: 992px) {
    .GSMis-form-horizontal.units-4 {
        grid-template-columns: repeat(3, auto 1fr);
    }
}

@media all and (min-width: 1200px) {
    .GSMis-form-horizontal.units-4 {
        grid-template-columns: repeat(4, auto 1fr);
    }
}

@media all and (min-width: 768px) {
    .GSMis-form-horizontal.units-4 .span-next {
        grid-column: span 3;
    }
}


/* 表單排列(垂直) 最多4個單位 */

.GSMis-form-vertical {
    display: grid;
    gap: 16px;
}

.GSMis-form-vertical label {
    margin-bottom: 4px;
}

.GSMis-form-vertical .full {
    grid-column: 1/-1;
}

@media all and (min-width: 768px) {
    .GSMis-form-vertical .span-2 {
        grid-column: span 2;
    }
}

@media all and (min-width: 768px) {
    .GSMis-form-vertical .span-3 {
        grid-column: span 2;
    }
}

@media all and (min-width: 992px) {
    .GSMis-form-vertical .span-3 {
        grid-column: span 3;
    }
}

@media all and (min-width: 768px) {
    .GSMis-form-vertical.unit-2 {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media all and (min-width: 768px) {
    .GSMis-form-vertical.unit-3 {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media all and (min-width: 992px) {
    .GSMis-form-vertical.unit-3 {
        grid-template-columns: repeat(3, 1fr);
    }
}

@media all and (min-width: 768px) {
    .GSMis-form-vertical.unit-4 {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media all and (min-width: 992px) {
    .GSMis-form-vertical.unit-4 {
        grid-template-columns: repeat(3, 1fr);
    }
}

@media all and (min-width: 1200px) {
    .GSMis-form-vertical.unit-4 {
        grid-template-columns: repeat(4, 1fr);
    }
}


/*# sourceMappingURL=data:application/json;charset=utf8;base64, */