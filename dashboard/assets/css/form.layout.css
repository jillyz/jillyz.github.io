@charset "UTF-8";
/* 表單排列(水平) 最多4個單位 */
.GSMis-form-horizontal > * {
  margin-bottom: 0; }

.GSMis-form-horizontal > dt {
  margin-top: 16px;
  font-weight: bold; }
  @media all and (min-width: 576px) {
    .GSMis-form-horizontal > dt {
      display: -webkit-box;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: end;
      -webkit-justify-content: end;
          -ms-flex-pack: end;
              justify-content: end;
      margin-left: 8px;
      margin-top: 7px;
      text-align: right; }
      .GSMis-form-horizontal > dt::after {
        content: "";
        display: block;
        height: 20px;
        margin-top: 2px;
        border-right: 1px solid rgba(128, 128, 128, 0.25);
        padding-left: 8px;
        margin-right: 8px; } }
  .GSMis-form-horizontal > dt > label {
    margin: 0; }

@media all and (min-width: 576px) {
  .GSMis-form-horizontal {
    display: grid;
    grid-template-columns: repeat(1, auto 1fr);
    gap: 20px 4px; } }

@media all and (min-width: 768px) {
  .GSMis-form-horizontal.__gs-units-2, .GSMis-form-horizontal.__gs-units-3, .GSMis-form-horizontal.__gs-units-4 {
    grid-template-columns: repeat(2, auto 1fr); } }

@media all and (min-width: 992px) {
  .GSMis-form-horizontal.__gs-units-3, .GSMis-form-horizontal.__gs-units-4 {
    grid-template-columns: repeat(3, auto 1fr); } }

@media all and (min-width: 1200px) {
  .GSMis-form-horizontal.__gs-units-4 {
    grid-template-columns: repeat(4, auto 1fr); } }

.GSMis-form-horizontal .__gs-col-full {
  grid-column: 1/-1; }

.GSMis-form-horizontal.__gs-units-2 .__gs-col-wide, .GSMis-form-horizontal.__gs-units-3 .__gs-col-wide, .GSMis-form-horizontal.__gs-units-4 .__gs-col-wide {
  grid-column: 1; }
  .GSMis-form-horizontal.__gs-units-2 .__gs-col-wide + dd, .GSMis-form-horizontal.__gs-units-3 .__gs-col-wide + dd, .GSMis-form-horizontal.__gs-units-4 .__gs-col-wide + dd {
    grid-column: 2/-1; }

@media all and (min-width: 768px) {
  .GSMis-form-horizontal.__gs-units-2 .__gs-col-span, .GSMis-form-horizontal.__gs-units-3 .__gs-col-span, .GSMis-form-horizontal.__gs-units-4 .__gs-col-span {
    grid-column: 1; }
    .GSMis-form-horizontal.__gs-units-2 .__gs-col-span + dd, .GSMis-form-horizontal.__gs-units-3 .__gs-col-span + dd, .GSMis-form-horizontal.__gs-units-4 .__gs-col-span + dd {
      grid-column: span 3; } }

@media all and (min-width: 992px) {
  .GSMis-form-horizontal.__gs-units-2 .__gs-col-span, .GSMis-form-horizontal.__gs-units-3 .__gs-col-span, .GSMis-form-horizontal.__gs-units-4 .__gs-col-span {
    grid-column: auto; }
    .GSMis-form-horizontal.__gs-units-2 .__gs-col-span.__gs-escape, .GSMis-form-horizontal.__gs-units-3 .__gs-col-span.__gs-escape, .GSMis-form-horizontal.__gs-units-4 .__gs-col-span.__gs-escape {
      grid-column: 1; } }

/* 多行label */
.GSMis-label-multi {
  margin-top: -5px;
  line-height: 1.1; }
  @media all and (min-width: 576px) {
    .GSMis-label-multi .__gs-break {
      display: block; } }

/* 表單排列(垂直) 最多4個單位 */
.GSMis-form-vertical {
  display: grid;
  gap: 16px; }
  .GSMis-form-vertical .__gs-item .form-control:not(.GSMis-no-border),
  .GSMis-form-vertical .__gs-item .form-select {
    border-width: 0;
    border-radius: 0;
    border-bottom: 1px solid gray; }
  .GSMis-form-vertical .__gs-item .GSMis-duration .input-group-text {
    background-color: transparent;
    border-width: 0; }
  .GSMis-form-vertical .__gs-item > label {
    color: #007a9a;
    font-weight: bold; }
  .GSMis-form-vertical .__gs-col-full {
    grid-column: 1/-1; }
  @media all and (min-width: 768px) {
    .GSMis-form-vertical .__gs-col-span {
      grid-column: span 2; } }
  @media all and (min-width: 768px) {
    .GSMis-form-vertical .__gs-col-spanX2 {
      grid-column: span 2; } }
  @media all and (min-width: 992px) {
    .GSMis-form-vertical .__gs-col-spanX2 {
      grid-column: span 3; } }
  @media all and (min-width: 768px) {
    .GSMis-form-vertical.__gs-units-2 {
      grid-template-columns: repeat(2, 1fr); } }
  @media all and (min-width: 768px) {
    .GSMis-form-vertical.__gs-units-3 {
      grid-template-columns: repeat(2, 1fr); } }
  @media all and (min-width: 992px) {
    .GSMis-form-vertical.__gs-units-3 {
      grid-template-columns: repeat(3, 1fr); } }
  @media all and (min-width: 768px) {
    .GSMis-form-vertical.__gs-units-4 {
      grid-template-columns: repeat(2, 1fr); } }
  @media all and (min-width: 992px) {
    .GSMis-form-vertical.__gs-units-4 {
      grid-template-columns: repeat(3, 1fr); } }
  @media all and (min-width: 1200px) {
    .GSMis-form-vertical.__gs-units-4 {
      grid-template-columns: repeat(4, 1fr); } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
