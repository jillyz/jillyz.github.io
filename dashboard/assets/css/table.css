@charset "UTF-8";
/* 表格RWD */
.GSMis-table-rwd th {
  white-space: nowrap; }

.GSMis-table-rwd thead {
  display: none; }
  @media all and (min-width: 992px) {
    .GSMis-table-rwd thead {
      display: table-header-group; } }

.GSMis-table-rwd td {
  display: grid;
  grid-template-columns: 8em 1fr; }
  @media all and (min-width: 992px) {
    .GSMis-table-rwd td {
      display: table-cell; } }
  .GSMis-table-rwd td::before {
    content: attr(data-th);
    padding-right: 1em;
    margin-right: 1em;
    border-right: 1px solid rgba(51, 51, 51, 0.3);
    text-align: right; }
    @media all and (min-width: 992px) {
      .GSMis-table-rwd td::before {
        display: none; } }
  @media all and (min-width: 992px) {
    .GSMis-table-rwd td {
      display: table-cell; } }

.GSMis-table-rwd tbody tr:nth-child(odd) {
  background-color: #efefef; }
  @media all and (min-width: 992px) {
    .GSMis-table-rwd tbody tr:nth-child(odd) {
      background-color: inherit; } }

/* 分頁 */
.GSMis-pagination .page-link {
  color: inherit; }

.GSMis-pagination .page-item.active .page-link {
  background-color: #4a4a4a;
  border-color: #4a4a4a; }

/* 表格上方功能列 */
.GSMis-table-top-bar {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap; }
  .GSMis-table-top-bar > div {
    margin-bottom: 8px; }

/* 表格大標題 */
.GSMis-table-caption {
  margin-bottom: 0;
  font-weight: bold;
  font-size: 1.25rem; }

/* 驗證失敗提示 */
.form-select.gs-error,
.form-control.gs-error {
  border-color: red; }

/*驗證失敗顯示提示文字*/
.gs-error + .invalid-feedback {
  display: block; }

/* 排序符號 */
.gs-btn-sort {
  position: relative;
  display: inline-block;
  padding-right: 1.5em;
  color: currentColor !important;
  text-decoration: none; }
  .gs-btn-sort .gs-icons {
    position: absolute;
    top: 0;
    right: 0;
    display: none;
    opacity: 0.5; }
    .gs-btn-sort .gs-icons > *:last-child {
      display: none; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
